# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mesh', [dirname(__file__)])
        except ImportError:
            import _mesh
            return _mesh
        if fp is not None:
            try:
                _mod = imp.load_module('_mesh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mesh = swig_import_helper()
    del swig_import_helper
else:
    import _mesh
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mesh.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _mesh.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mesh.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mesh.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mesh.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mesh.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mesh.SwigPyIterator_copy(self)

    def next(self):
        return _mesh.SwigPyIterator_next(self)

    def __next__(self):
        return _mesh.SwigPyIterator___next__(self)

    def previous(self):
        return _mesh.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mesh.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mesh.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mesh.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mesh.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mesh.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mesh.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mesh.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _mesh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mesh.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mesh.IntVector___nonzero__(self)

    def __bool__(self):
        return _mesh.IntVector___bool__(self)

    def __len__(self):
        return _mesh.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _mesh.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mesh.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mesh.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mesh.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mesh.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mesh.IntVector___setitem__(self, *args)

    def pop(self):
        return _mesh.IntVector_pop(self)

    def append(self, x):
        return _mesh.IntVector_append(self, x)

    def empty(self):
        return _mesh.IntVector_empty(self)

    def size(self):
        return _mesh.IntVector_size(self)

    def swap(self, v):
        return _mesh.IntVector_swap(self, v)

    def begin(self):
        return _mesh.IntVector_begin(self)

    def end(self):
        return _mesh.IntVector_end(self)

    def rbegin(self):
        return _mesh.IntVector_rbegin(self)

    def rend(self):
        return _mesh.IntVector_rend(self)

    def clear(self):
        return _mesh.IntVector_clear(self)

    def get_allocator(self):
        return _mesh.IntVector_get_allocator(self)

    def pop_back(self):
        return _mesh.IntVector_pop_back(self)

    def erase(self, *args):
        return _mesh.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _mesh.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _mesh.IntVector_push_back(self, x)

    def front(self):
        return _mesh.IntVector_front(self)

    def back(self):
        return _mesh.IntVector_back(self)

    def assign(self, n, x):
        return _mesh.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _mesh.IntVector_resize(self, *args)

    def insert(self, *args):
        return _mesh.IntVector_insert(self, *args)

    def reserve(self, n):
        return _mesh.IntVector_reserve(self, n)

    def capacity(self):
        return _mesh.IntVector_capacity(self)
    __swig_destroy__ = _mesh.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _mesh.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mesh.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mesh.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _mesh.DoubleVector___bool__(self)

    def __len__(self):
        return _mesh.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _mesh.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mesh.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mesh.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mesh.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mesh.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mesh.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _mesh.DoubleVector_pop(self)

    def append(self, x):
        return _mesh.DoubleVector_append(self, x)

    def empty(self):
        return _mesh.DoubleVector_empty(self)

    def size(self):
        return _mesh.DoubleVector_size(self)

    def swap(self, v):
        return _mesh.DoubleVector_swap(self, v)

    def begin(self):
        return _mesh.DoubleVector_begin(self)

    def end(self):
        return _mesh.DoubleVector_end(self)

    def rbegin(self):
        return _mesh.DoubleVector_rbegin(self)

    def rend(self):
        return _mesh.DoubleVector_rend(self)

    def clear(self):
        return _mesh.DoubleVector_clear(self)

    def get_allocator(self):
        return _mesh.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _mesh.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _mesh.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _mesh.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _mesh.DoubleVector_push_back(self, x)

    def front(self):
        return _mesh.DoubleVector_front(self)

    def back(self):
        return _mesh.DoubleVector_back(self)

    def assign(self, n, x):
        return _mesh.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _mesh.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _mesh.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _mesh.DoubleVector_reserve(self, n)

    def capacity(self):
        return _mesh.DoubleVector_capacity(self)
    __swig_destroy__ = _mesh.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _mesh.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class myobjVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, myobjVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, myobjVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mesh.myobjVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mesh.myobjVector___nonzero__(self)

    def __bool__(self):
        return _mesh.myobjVector___bool__(self)

    def __len__(self):
        return _mesh.myobjVector___len__(self)

    def __getslice__(self, i, j):
        return _mesh.myobjVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mesh.myobjVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mesh.myobjVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mesh.myobjVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mesh.myobjVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mesh.myobjVector___setitem__(self, *args)

    def pop(self):
        return _mesh.myobjVector_pop(self)

    def append(self, x):
        return _mesh.myobjVector_append(self, x)

    def empty(self):
        return _mesh.myobjVector_empty(self)

    def size(self):
        return _mesh.myobjVector_size(self)

    def swap(self, v):
        return _mesh.myobjVector_swap(self, v)

    def begin(self):
        return _mesh.myobjVector_begin(self)

    def end(self):
        return _mesh.myobjVector_end(self)

    def rbegin(self):
        return _mesh.myobjVector_rbegin(self)

    def rend(self):
        return _mesh.myobjVector_rend(self)

    def clear(self):
        return _mesh.myobjVector_clear(self)

    def get_allocator(self):
        return _mesh.myobjVector_get_allocator(self)

    def pop_back(self):
        return _mesh.myobjVector_pop_back(self)

    def erase(self, *args):
        return _mesh.myobjVector_erase(self, *args)

    def __init__(self, *args):
        this = _mesh.new_myobjVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _mesh.myobjVector_push_back(self, x)

    def front(self):
        return _mesh.myobjVector_front(self)

    def back(self):
        return _mesh.myobjVector_back(self)

    def assign(self, n, x):
        return _mesh.myobjVector_assign(self, n, x)

    def resize(self, *args):
        return _mesh.myobjVector_resize(self, *args)

    def insert(self, *args):
        return _mesh.myobjVector_insert(self, *args)

    def reserve(self, n):
        return _mesh.myobjVector_reserve(self, n)

    def capacity(self):
        return _mesh.myobjVector_capacity(self)
    __swig_destroy__ = _mesh.delete_myobjVector
    __del__ = lambda self: None
myobjVector_swigregister = _mesh.myobjVector_swigregister
myobjVector_swigregister(myobjVector)

class MeshNodeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshNodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshNodeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mesh.MeshNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mesh.MeshNodeVector___nonzero__(self)

    def __bool__(self):
        return _mesh.MeshNodeVector___bool__(self)

    def __len__(self):
        return _mesh.MeshNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _mesh.MeshNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mesh.MeshNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mesh.MeshNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mesh.MeshNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mesh.MeshNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mesh.MeshNodeVector___setitem__(self, *args)

    def pop(self):
        return _mesh.MeshNodeVector_pop(self)

    def append(self, x):
        return _mesh.MeshNodeVector_append(self, x)

    def empty(self):
        return _mesh.MeshNodeVector_empty(self)

    def size(self):
        return _mesh.MeshNodeVector_size(self)

    def swap(self, v):
        return _mesh.MeshNodeVector_swap(self, v)

    def begin(self):
        return _mesh.MeshNodeVector_begin(self)

    def end(self):
        return _mesh.MeshNodeVector_end(self)

    def rbegin(self):
        return _mesh.MeshNodeVector_rbegin(self)

    def rend(self):
        return _mesh.MeshNodeVector_rend(self)

    def clear(self):
        return _mesh.MeshNodeVector_clear(self)

    def get_allocator(self):
        return _mesh.MeshNodeVector_get_allocator(self)

    def pop_back(self):
        return _mesh.MeshNodeVector_pop_back(self)

    def erase(self, *args):
        return _mesh.MeshNodeVector_erase(self, *args)

    def __init__(self, *args):
        this = _mesh.new_MeshNodeVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _mesh.MeshNodeVector_push_back(self, x)

    def front(self):
        return _mesh.MeshNodeVector_front(self)

    def back(self):
        return _mesh.MeshNodeVector_back(self)

    def assign(self, n, x):
        return _mesh.MeshNodeVector_assign(self, n, x)

    def resize(self, *args):
        return _mesh.MeshNodeVector_resize(self, *args)

    def insert(self, *args):
        return _mesh.MeshNodeVector_insert(self, *args)

    def reserve(self, n):
        return _mesh.MeshNodeVector_reserve(self, n)

    def capacity(self):
        return _mesh.MeshNodeVector_capacity(self)
    __swig_destroy__ = _mesh.delete_MeshNodeVector
    __del__ = lambda self: None
MeshNodeVector_swigregister = _mesh.MeshNodeVector_swigregister
MeshNodeVector_swigregister(MeshNodeVector)


def generateMesh(dimensions, positions_1, positions_2, radius, axis):
    return _mesh.generateMesh(dimensions, positions_1, positions_2, radius, axis)
generateMesh = _mesh.generateMesh
class MeshNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _mesh.MeshNode_index_set
    __swig_getmethods__["index"] = _mesh.MeshNode_index_get
    if _newclass:
        index = _swig_property(_mesh.MeshNode_index_get, _mesh.MeshNode_index_set)
    __swig_setmethods__["x"] = _mesh.MeshNode_x_set
    __swig_getmethods__["x"] = _mesh.MeshNode_x_get
    if _newclass:
        x = _swig_property(_mesh.MeshNode_x_get, _mesh.MeshNode_x_set)
    __swig_setmethods__["y"] = _mesh.MeshNode_y_set
    __swig_getmethods__["y"] = _mesh.MeshNode_y_get
    if _newclass:
        y = _swig_property(_mesh.MeshNode_y_get, _mesh.MeshNode_y_set)
    __swig_setmethods__["z"] = _mesh.MeshNode_z_set
    __swig_getmethods__["z"] = _mesh.MeshNode_z_get
    if _newclass:
        z = _swig_property(_mesh.MeshNode_z_get, _mesh.MeshNode_z_set)
    __swig_setmethods__["adj"] = _mesh.MeshNode_adj_set
    __swig_getmethods__["adj"] = _mesh.MeshNode_adj_get
    if _newclass:
        adj = _swig_property(_mesh.MeshNode_adj_get, _mesh.MeshNode_adj_set)

    def __init__(self, *args):
        this = _mesh.new_MeshNode(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mesh.delete_MeshNode
    __del__ = lambda self: None
MeshNode_swigregister = _mesh.MeshNode_swigregister
MeshNode_swigregister(MeshNode)


def fonc():
    return _mesh.fonc()
fonc = _mesh.fonc

def test():
    return _mesh.test()
test = _mesh.test

def print_something():
    return _mesh.print_something()
print_something = _mesh.print_something

def print_vector(v):
    return _mesh.print_vector(v)
print_vector = _mesh.print_vector
class myobj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, myobj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, myobj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _mesh.myobj_a_set
    __swig_getmethods__["a"] = _mesh.myobj_a_get
    if _newclass:
        a = _swig_property(_mesh.myobj_a_get, _mesh.myobj_a_set)

    def __init__(self, *args):
        this = _mesh.new_myobj(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _mesh.delete_myobj
    __del__ = lambda self: None
myobj_swigregister = _mesh.myobj_swigregister
myobj_swigregister(myobj)

# This file is compatible with both classic and new-style classes.


